<% layout("layouts/boilerplate") %>
<!--path argument in functionObject-->
<!--passes in this templates code in body variable to boilerplate template-->
<!--this template then contains the new combined code-->

<!--mapboxgl clientside js library -> map div with map id -->
<!--inline style property - 100 percent width of Bootstrap container div is in-->
<div id="map" style="width: 100%; height: 500px"></div>
<h1>All Campgrounds</h1>
<div>
  <a href="/campgrounds/new">Add Campground</a>
  <!--(http structured) GET request-->
</div>

<!--create Bootstrap -> card component for each element in campgroundsArray-->
<% for(let campground of campgrounds){%>
<!--Bootstrap component -> card-->
<div class="card mb-3">
  <!--Bootstrap layout -> grid - row -col - total space col = 12units -->
  <div class="row">
    <!--only take up 4 units out of 12 after medium breakpoint-->
    <div class="col-md-4">
      <!--check if images arrayObject length not 0(not falsy) ie true - therfore index 0 exists -->
      <%if (campground.images.length){%>
      <!--Bootstrap responsive image class-->
      <!--display the image at index 0 in images arrayObject-->
      <img
        class="img-fluid"
        src="<%= campground.images[0].url %>"
        alt="Image missing"
      />
      <!--sending (http strucutred) GET request to cloudinaryWebApi endpoint - /YelpCamp/unqiueimagename.fileextension-->
      <%}else{%>
      <!--else if images arrayObject length was 0(falsy) ie emptyArrayObject - then we provide default image GET request url-->
      <!--Bootstrap responsive image class-->
      <!--display a default image-->
      <img
        class="img-fluid"
        src="https://res.cloudinary.com/dh9ncm8mp/image/upload/v1664596956/YelpCamp/edoj1d7rsb15w9lljape.webp"
        alt="Image missing"
      />
      <!--sending (http strucutred) GET request to cloudinaryWebApi endpoint - /YelpCamp/unqiueimagename.fileextension-->
      <%}%>
    </div>
    <!--only take up the rest 8 units out of 12-4 after medium breakpoint-->
    <div class="col-md-8">
      <div class="card-body">
        <h5 class="card-title"><%=campground.title%></h5>
        <p class="card-text"><%=campground.description%></p>
        <small class="text-muted"><%= campground.location %></small>
        <!--Bootstrap component -> buttons -->
        <a href="/campgrounds/<%=campground._id%>" class="btn btn-primary"
          ><%= campground.title %></a
        ><!--(http structured) GET request-->
      </div>
    </div>
  </div>
  <!--ROW CLOSED-->
</div>
<!--CARD CLOSED-->
<%}%>
<script>
  //***************************************
  //clientside js for browser to execute - eg. app.js
  //***************************************
  //NOTE ejs tags reminder -
  //CASE 1 - %- outputs unescaped value (ie show value exactly as requested - no quotes added on includes element tags (dangerous) - no quotes added on jsObject)
  //CASE 2 -  we were previously using %= that outputs escaped value (ie adds quotes on element tags - dosnt let them be element tags + adds quotes on jsObjects in html (adds other charecters while in script))
  //ejs template allows us to write serverside js in html  - nodejs executes the serverside js in ejs tempaltes
  //processObject is a globalObject in nodejs - therefore it is available in ejs templates
  //campgrounds was a serverside variable - passed as ejs variable to this ejs template //arrayObject of jsObjects
  //when nodejs exectues serverside js - responseObject.render(ejs filePath,variableObject) - it converts ejs template to pure html template + adds it to (http structured) response body ands sends it)
  //converting the ejs template to pure html template means - nodejs also executes the serverside js in the ejs template
  //we store the output value into a client side js variable in a script tag for browser to execute
  //Note - other clientside js scripts can now use this clientside variable
  const MAPBOX_APIS_PUBLIC_ACCESS_TOKEN ="<%-process.env.MAPBOX_APIS_PUBLIC_ACCESS_TOKEN %>";
  //issue - all modelInstanceObjects in campgroundsObjectsArrayObject's _id properties value needs ObjectId class which is not availble in clientside js - solution - we have to convert all modelInstanceObject's into jsonStringObject - ie convert campgroundsObjectsArrayObject into jsonStringObjectArrayObject
  //JSONGlobalObject.method(campgroundsObjectsArrayObject) returns jsonStringObjectArrayObject of passed in jsObjectArrayObject (NOTE - not pure JSON string stringObject- since that has quotes around it - not just on inside value)
  //NOTE - when passing into clientside variable - we edit jsonStringObjectArrayObject to be like a jsonStringObject instead
  //to conform to the required structure of data we load into mapInstanceObject - {"feature":jsonStringObjectArrayObject}
  const campgroundsJsonStringObject = {features:<%-JSON.stringify(campgrounds)%>} //allows immidiate access to campgroundsArrayObject instead of sending GET request to our webApi/server endpoint (fetchApiAsyncMethod - ie ajx request - sent to webApi container - worker thread)
  //campgroundsJsonStringObject is a jsonStringObject - not pure JSON string stringObject - therefore can call its properties
  //NOTE - jsonStringObjectArrayObject is a value inside campgroundsJsonStringObject - not pure JSON string stringObject - therfore can index its values
</script>
<!--mapboxgl clientside js library - mapboxgl helper js file/js library - renders cluster map -->
<!--client side js for browser to execute- GET request to our express app/webApi/server-->
<script src="/js/renderIndexPageClusterMap.js"></script>

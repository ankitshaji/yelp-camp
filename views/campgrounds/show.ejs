<% layout("layouts/boilerplate") %>
<!--path argument in functionObject-->
<!--passes in this templates code in body variable to boilerplate template-->
<!--this template then contains the new combined code-->

<!--NOTE - link is in body not head - ie.after some html rendering-->
<!--starability library -starability style.css file/starability css library -->
<!--client side css for browser to execute- GET request to our express app/webApi/server-->
<link rel="stylesheet" href="/css/starability-basic.css" />

<!--Bootstrap layout -> grid - row -col - total space row = 12units -->
<div class="row">
  <!--only take up 6 units out of 12-->
  <div class="col-6">
    <!--Boostrap Component -> Carousel-->
    <div
      id="carouselExampleControls"
      class="carousel slide"
      data-bs-ride="carousel"
    >
      <div class="carousel-inner">
        <!--arrayInstObj.arrayMethod //returns undefined //callback gets passed each element and its index as arguments-->
        <%campground.images.forEach((img,i)=>{%>
          <!--terinary operator check if index is 0 to add active class-->
        <div class="carousel-item <%= i === 0 ? "active":"" %>">
          <img src="<%= img.url %>" class="d-block w-100" alt="Image missing" crossorigin="anonymous"/>
          <!--crossorigin attribute - make COEP header accepts response from third party domain - sends anonymous CORS mode request(ie.without credential(ie cookies)) to a third party origin/domain -->
          <!--Tells response to set an ACAO header - This lets COEP header know it is a response from an accepted third party domain, therfore response is not blocked by COEP header -->
          <!--src is sending (http strucutred) GET request to cloudinaryWebApi endpoint - /YelpCamp/unqiueimagename.fileextension-->
        </div>
        <%})%>
      </div>
      <!--only display controls if more than one image exists,arrayInstObj.length property-->
      <%if(campground.images.length > 1){%>
      <button
        class="carousel-control-prev"
        type="button"
        data-bs-target="#carouselExampleControls"
        data-bs-slide="prev"
      >
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
      </button>
      <button
        class="carousel-control-next"
        type="button"
        data-bs-target="#carouselExampleControls"
        data-bs-slide="next"
      >
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
      </button>
      <%}%>
    </div>
    <!--create Bootstrap -> card component-->
    <!--Bootstrap Utilities -> spacing -> class -> marginbBottom/marginTop -->
    <div class="card mb-3 mt-3">
      <div class="card-body">
        <h5 class="card-title"><%= campground.title %></h5>
        <p class="card-text"><%= campground.description %></p>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item text-muted"><%= campground.location %></li>
        <li class="list-group-item">
          Submitted by <%= campground.author.username %>
        </li>
        <li class="list-group-item">$<%= campground.price %>/night</li>
      </ul>
      <!--if currentUser undefined then not logged in - dont display edit and delete-->
      <!--if current user not author - dont display edit and delete-->
      <!--campground.author is populated but if no property mentioned ,it assumes we mean campground.author._id for comparisons-->
      <!--object comparison uses the equalsMethod-->
      <% if(currentUser && campground.author._id.equals(currentUser._id)){%>
      <div class="card-body">
        <!--Bootstrap Component -> button-->
        <a
          href="/campgrounds/<%= campground._id %>/edit"
          class="card-link btn btn-info"
          >Edit</a
        >
        <!--(http structured) GET request-->

        <!--(http structured) POST request form-->
        <!--browser forms can only make POST and GET method (http structured) requests-->
        <!--using method-override npm package - middlewareFunction("key") -->
        <!--when (http structured) POST request arrives it changes the req.method from POST to DELETE-->
        <!--adding ?queryString to /resource/:id/?key=value-->
        <!--we set value for key(_method) with alternative to POST ie.DELETE-->
        <!--Bootstrap Utilities -> display -> class -> d-inline, set form element as inline and not default block-->
        <form
          class="d-inline"
          action="/campgrounds/<%= campground._id %>?_method=DELETE"
          method="POST"
        >
          <!--Bootstrap Component -> button-->
          <button class="btn btn-danger">Delete</button>
        </form>
      </div>
      <%}%>
      <div class="card-footer text-muted">2 days ago</div>
    </div>
  </div>
  <!--COLUMN CLOSED-->
  <!--take up rest 6 units out of 12-->
  <div class="col-6">
    <!--mapboxgl library -> map div with map id -->
    <div id="map"></div>
    <!--if currentUser undefined then not logged in - dont display review form-->
    <%if(currentUser){%>
    <h2>Leave a Review</h2>
    <!--(http structured) POST request form-->
    <!--form data not sent via ?queryString(can exist) but sent via request body-->
    <!--form data middlewareMethod of expressAppObject - converts request body into req.body-->
    <!--ie jsObject-{groupKey:{key/name:inputValue,key/name:inputValue}}-->
    <!--form needs novalidate boolean attribute which negates all input's required boolean attribute 
     form also needs custom class needs-validation - This combination allows boostrap validation to take over instead-->
    <form
      class="needs-validation"
      action="/campgrounds/<%=campground._id%>/reviews"
      method="POST"
      novalidate
    >
      <!--Bootstrap Utilities -> spacing -> class -> marginbBottom -->
      <div class="mb-3">
        <!--starabiliyty library - class + fieldset element structure using group of radio buttons - only 1 can be selected + needs same name attribute value-->
        <!-- adds accessiblity - aria-label attribute for screen readers -->
        <fieldset class="starability-basic">
          <legend>Star rating:</legend>
          <!--if no radio button input selected - default checked attribute-->
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <input
            type="radio"
            id="no-rate"
            class="input-no-rate"
            name="review[rating]"
            value="1"
            checked
            aria-label="No rating."
          />
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <!-- match for to id -->
          <input
            type="radio"
            id="first-rate1"
            name="review[rating]"
            value="1"
          />
          <label for="first-rate1" title="Terrible">1 star</label>
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <!-- match for to id -->
          <input
            type="radio"
            id="first-rate2"
            name="review[rating]"
            value="2"
          />
          <label for="first-rate2" title="Not good">2 stars</label>
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <!-- match for to id -->
          <input
            type="radio"
            id="first-rate3"
            name="review[rating]"
            value="3"
          />
          <label for="first-rate3" title="Average">3 stars</label>
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <!-- match for to id -->
          <input
            type="radio"
            id="first-rate4"
            name="review[rating]"
            value="4"
          />
          <label for="first-rate4" title="Very good">4 stars</label>
          <!--group rating as property/key in review object, review is property/key in req.body jsObject-->
          <!-- match for to id -->
          <input
            type="radio"
            id="first-rate5"
            name="review[rating]"
            value="5"
          />
          <label for="first-rate5" title="Amazing">5 stars</label>
        </fieldset>
      </div>
      <!--Bootstrap Utilities -> spacing -> class -> marginbBottom -->
      <div class="mb-3">
        <!-- match for to id -->
        <!--group body as property/key in review object, review is property/key in req.body jsObject-->
        <!--Bootstrap Forms -> form controls-->
        <label class="form-label" for="body">Review:</label>
        <textarea
          class="form-control"
          name="review[body]"
          id="body"
          cols="30"
          rows="3"
          required
        ></textarea>
        <!--Bootstrap Forms -> validation -> class -->
        <div class="valid-feedback">Looks good!</div>
      </div>
      <div class="mb-3">
        <!--Bootstrap Component -> button-->
        <button class="btn btn-success">Submit</button>
      </div>
    </form>
    <%}%> 
    <%for(let review of campground.reviews){%>
    <!--create Bootstrap -> card component-->
    <!--Bootstrap Utilities -> spacing -> class -> marginbBottom -->
    <div class="card mb-3">
      <div class="card-body">
        <!--foundCampground reviews property is populated and each author property inside each review is populated -->
        <h5 class="card-title"><%= review.author.username %></h5>
        <!--starabiliyty library - class + custom data-* attribute -->
        <!-- adds accessiblity - stars become paragraph text for screen readers-->
        <p class="starability-result" data-rating="<%= review.rating %>">
          Rated: <%= review.rating %> stars
        </p>
        <p class="card-text">Review: <%=review.body%></p>
        <!--if currentUser undefined then not logged in - dont display delete button on review-->
        <!--if current user not author of review - dont display delete button on review-->
        <!--review.author is populated but if no property mentioned ,it assumes we mean review.author._id for comparisons-->
        <!--object comparison uses the equalsMethod-->
        <% if(currentUser && review.author._id.equals(currentUser._id)){%>
        <!--(http structured) POST request form-->
        <!--browser forms can only make POST and GET method (http structured) requests-->
        <!--using method-override npm package - middlewareFunction("key") -->
        <!--when (http structured) POST request arrives it changes the req.method from POST to DELETE-->
        <!--adding ?queryString to /resource/:id/?key=value-->
        <!--we set value for key(_method) with alternative to POST ie.DELETE-->
        <form
          action="/campgrounds/<%= campground._id %>/reviews/<%=review._id%>?_method=DELETE"
          method="POST"
        >
          <!--Bootstrap Component -> button-->
          <button class="btn btn-sm btn-danger">Delete</button>
        </form>
        <%}%>
      </div>
    </div>
    <%}%>
  </div>
  <!--COLUMN CLOSED-->
</div>
<!--ROW CLOSED-->
<footer>
  <a href="/campgrounds">Back to Index</a>
  <!--(http structured) GET request-->
</footer>
<!--NOTE - scripts are in body not head - ie.after some html rendering-->
<!--client side js for browser to execute-->
<script>
  //***************************************
  //clientside js for browser to execute - eg. app.js
  //***************************************
  //NOTE ejs tags reminder - ejs needs inner outer quotes always which are removed after execution of serverside js by node //note - jsObjects dont need inner outer quotes - jsObjects have quotes added to them
  //CASE 1 - %- outputs unescaped value (ie show value exactly as requested) - includes html tags (dangerous-allows xss attack) - includes inner single quotes 
  //CASE 2 - %= outputs escaped value - html tag is replaced with entity code - inner single quotes are replaced with entity code
  //ejs template allows us to write serverside js in html  - nodejs executes the serverside js in ejs tempaltes
  //processObject is a globalObject in nodejs - therefore it is available in ejs templates
  //campground was a serverside variable - passed as ejs variable to this ejs template  
  //when nodejs exectues serverside js - responseObject.render(ejs filePath,variableObject) - it converts ejs template to pure html template + adds it to (http structured) response body ands sends it)
  //converting the ejs template to pure html template means - nodejs also executes the serverside js in the ejs template
  //we store the output value into a client side js variable in a script tag for browser to execute
  //Note - other client side js scripts can now use this client side variable
  const MAPBOX_APIS_PUBLIC_ACCESS_TOKEN = "<%-process.env.MAPBOX_APIS_PUBLIC_ACCESS_TOKEN %>";
  //issue - modelInstanceObjects's _id properties value needs ObjectId class which is not availble in clientside js - solution - we have to convert modelInstanceObject into JSON string (ie jsonObjectStringInstObject)
  //JSONGlobalObject.method(campgroundObject) returns JSON string (ie campgroundObjStringInstObj) ,its quotes are removed during execution of serverside js by node and we get jsonObject
  const campgroundJsonObject = <%-JSON.stringify(campground)%> //allows immidiate access to campgroundObject instead of sending GET request to our webApi/server endpoint (fetchApiAsyncMethod - ie ajx request - sent to webApi container - worker thread)
  //campgroundJsonObject is a jsonObject - not pure JSON string (ie not campgroundObjStringInstObj) - therefore can call its properties
  //Note- 
  //This would have allowed xss attacks - since its passing the unescaped value to be executed by the browser ie.(campgroundJsonObject.title could containt HTML tags eg-<script>alert('Error')<script>)
  //but we had a serverside validation check in joi that checked for inputted text value contained html tags, and prevented adding to collection if it did.
</script>
<!--mapboxgl library - mapboxgl helper js file/js library - renders map -->
<!--client side js for browser to execute- GET request to our express app/webApi/server-->
<script src="/js/renderShowPageMap.js"></script>
